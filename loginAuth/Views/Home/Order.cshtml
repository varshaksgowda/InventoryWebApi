
@{
    ViewBag.Title = "Order";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Management</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f4f4f4;
        }

        h1 {
            text-align: center;
            color: #2c3e50;
        }

        #OrderForm {
            background-color: white;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
            max-width: 500px;
            margin: 20px auto;
        }

        .form-group {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
        }

            .form-group label {
                flex: 0 0 30%;
                font-weight: bold;
                color: #2c3e50;
            }

            .form-group input {
                flex: 1;
                padding: 8px;
                border-radius: 4px;
                border: 1px solid #ccc;
            }

        button {
            padding: 10px;
            width: 100%;
            background-color: #3498db;
            border: none;
            color: white;
            cursor: pointer;
            font-size: 16px;
            margin-top: 10px;
            border-radius: 4px;
        }

            button:hover {
                background-color: #2980b9;
            }

        #responseMessage {
            margin-top: 20px;
            text-align: center;
            font-weight: bold;
        }

        #OrdersList {
            margin-top: 30px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
        }

        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        th {
            background-color: #2980b9;
            color: white;
            font-weight: bold;
        }

        tr:hover {
            background-color: #f1f1f1;
        }

        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f4f4f4;
            background-image: url("https://img.freepik.com/premium-photo/smart-warehouse-inventory-management-system-concept-manager-using-digital-tablet-showing-warehouse-software-management-dashboard-blurred-warehouse-as-background_114016-20887.jpg");
            background-repeat: no-repeat;
            background-size: cover;
        }
    </style>
</head>
<body>

    <h1>Order Management</h1>

    <div id="OrderForm">


        <div class="form-group">
            <label for="orderId">Order ID:</label>
            <input type="number" id="orderId" name="orderId" required>
        </div>

        <div class="form-group">
            <label for="productId">Product ID:</label>
            <input type="number" id="productId" name="productId" required>
        </div>

        <div class="form-group">
            <label for="quantity">Quantity:</label>
            <input type="number" id="quantity" name="quantity" required>
        </div>

        <div class="form-group">
            <label for="orderDate">Order Date:</label>
            <input type="text" id="orderDate" name="orderDate" required>
        </div>

        <div class="form-group">
            <label for="status">Status:</label>
            <input type="text" id="status" name="status" required>
        </div>

        <button type="button" onclick="postOrder()">POST Order</button>
        <button type="button" onclick="putOrder()">PUT Order</button>
        <button type="button" onclick="deleteOrder()">DELETE Order</button>
    </div>

    <label id="responseMessage"></label>

    <h2>View All Orders</h2>
    <button type="button" onclick="fetchAllOrders()">Get All Orders</button>

    <div id="OrdersList"></div>

    <script>
        const apiUrl = 'https://localhost:7047/api/Orders'; // Adjust API URL accordingly

        function displayMessage(message, isError = false) {
            const responseLabel = document.getElementById("responseMessage");
            responseLabel.style.color = isError ? "red" : "green";
            responseLabel.textContent = message;
        }

        function postOrder() {
            const orderData = {
                orderId: parseInt(document.getElementById("orderId").value),
                productId: parseInt(document.getElementById("productId").value),
                quantity: parseInt(document.getElementById("quantity").value),
                orderDate: new Date(document.getElementById("orderDate").value).toISOString(),
                status: document.getElementById("status").value
            };

            fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(orderData)
            })
                .then(response => response.ok ? response.json() : Promise.reject('Failed to POST'))
                .then(data => displayMessage('Order added successfully.'))
                .catch(error => displayMessage(error, true));
        }

        function putOrder() {
            const orderId = document.getElementById("orderId").value;
            const orderData = {
                orderId: parseInt(orderId),
                productId: parseInt(document.getElementById("productId").value),
                quantity: parseInt(document.getElementById("quantity").value),
                orderDate: new Date(document.getElementById("orderDate").value).toISOString(),
                status: document.getElementById("status").value
            };

            fetch(`${apiUrl}/${orderId}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(orderData)
            })
                .then(response => response.ok ? response.json() : Promise.reject('Failed to PUT'))
                .then(data => displayMessage('Order updated successfully.'))
                .catch(error => displayMessage(error, true));
        }

        function deleteOrder() {
            const orderId = document.getElementById("orderId").value;

            fetch(`${apiUrl}/${orderId}`, {
                method: 'DELETE',
                headers: { 'Content-Type': 'application/json' }
            })
                .then(response => response.ok ? displayMessage('Order deleted successfully.') : Promise.reject('Failed to DELETE'))
                .catch(error => displayMessage(error, true));
        }

        function fetchAllOrders() {
            fetch(apiUrl)
                .then(response => response.json())
                .then(data => displayOrders(data))
                .catch(error => displayMessage('Error fetching orders.', true));
        }

        function displayOrders(orders) {
            const ordersList = document.getElementById("OrdersList");
            ordersList.innerHTML = `<h3>Order List:</h3><table>
                    <tr><th>Order ID</th><th>Product ID</th><th>Quantity</th><th>Order Date</th><th>Status</th></tr>
                    ${orders.map(order => `
                        <tr>
                            <td>${order.orderId}</td>
                            <td>${order.productId}</td>
                            <td>${order.quantity}</td>
                            <td>${order.orderDate}</td>
                            <td>${order.status}</td>
                        </tr>`).join('')}
                </table>`;
        }
    </script>
</body>
</html>


